local XenoHub = {
    Window = nil,
    Tabs = {},
    ActiveTab = nil,
    DraggableElements = {},
    Notifications = {},
    ImagePreview = nil
}

-- Main Window Creation
function XenoHub:CreateWindow()
    -- Create main window
    self.Window = {
        Title = "XENO HUB GROW A GARDEN",
        SubTitle = "by : xeno999",
        Visible = true,
        Position = {x = 100, y = 100},
        Size = {width = 400, height = 500},
        Color = {r = 30, g = 30, b = 40, a = 240},
        Draggable = true,
        CloseButton = true,
        Elements = {}
    }
    
    -- Create draggable image preview
    self.ImagePreview = {
        Visible = true,
        Position = {x = 20, y = 20},
        Size = {width = 50, height = 50},
        Image = nil,
        Draggable = true
    }
    
    -- Initialize UI elements
    self:InitializeUI()
end

-- Initialize UI Elements
function XenoHub:InitializeUI()
    -- Add close button functionality
    if self.Window.CloseButton then
        table.insert(self.Window.Elements, {
            Type = "CloseButton",
            Position = {x = self.Window.Size.width - 30, y = 10},
            Size = {width = 20, height = 20},
            OnClick = function() 
                self.Window.Visible = false 
                self.ImagePreview.Visible = false
            end
        })
    end
    
    -- Add title and subtitle
    table.insert(self.Window.Elements, {
        Type = "Title",
        Text = self.Window.Title,
        Position = {x = 20, y = 15},
        FontSize = 18,
        Color = {r = 255, g = 255, b = 255, a = 255}
    })
    
    table.insert(self.Window.Elements, {
        Type = "SubTitle",
        Text = self.Window.SubTitle,
        Position = {x = 20, y = 40},
        FontSize = 12,
        Color = {r = 150, g = 150, b = 150, a = 180},
        Visible = false -- Initially hidden as requested
    })
    
    -- Add logo image
    table.insert(self.Window.Elements, {
        Type = "Logo",
        Position = {x = self.Window.Size.width - 70, y = 10},
        Size = {width = 50, height = 50},
        Image = "XENO_HUB_LOGO" -- Placeholder for actual image
    })
end

-- Tab System
function XenoHub:AddTab(name)
    local newTab = {
        Name = name,
        Active = false,
        Elements = {},
        Position = {x = 10, y = 70},
        Size = {width = self.Window.Size.width - 20, height = self.Window.Size.height - 80},
        ScrollOffset = 0,
        MaxScroll = 0
    }
    
    table.insert(self.Tabs, newTab)
    
    -- If this is the first tab, make it active
    if #self.Tabs == 1 then
        self:SetActiveTab(name)
    end
    
    return newTab
end

function XenoHub:SetActiveTab(name)
    for _, tab in ipairs(self.Tabs) do
        tab.Active = (tab.Name == name)
    end
    self.ActiveTab = name
end

-- UI Elements
function XenoHub.Tab:AddButton(params)
    table.insert(self.Elements, {
        Type = "Button",
        Text = params[1],
        Callback = params[2],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 30},
        Animation = "Press"
    })
    self:UpdateScroll()
end

function XenoHub.Tab:AddToggle(params)
    table.insert(self.Elements, {
        Type = "Toggle",
        Text = params[1],
        Callback = params[2],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 25},
        State = false, -- Starts as red/off
        BoxSize = 15
    })
    self:UpdateScroll()
end

function XenoHub.Tab:AddCheckbox(params)
    table.insert(self.Elements, {
        Type = "Checkbox",
        Text = params[1],
        Callback = params[2],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 25},
        State = false, -- Starts as red/✖️
        BoxSize = 15
    })
    self:UpdateScroll()
end

function XenoHub.Tab:AddLabel(params)
    table.insert(self.Elements, {
        Type = "Label",
        Text = params[1],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 20},
        Code = params[2] or nil
    })
    self:UpdateScroll()
end

function XenoHub.Tab:AddDropdown(params)
    table.insert(self.Elements, {
        Type = "Dropdown",
        Text = params[1],
        Options = params[2],
        Callback = params[3],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 30},
        Expanded = false,
        SelectedIndex = 1,
        ArrowState = "⬇️", -- Starts pointing down
        MaxVisibleOptions = 5,
        OptionHeight = 25
    })
    self:UpdateScroll()
end

function XenoHub.Tab:AddSection(params)
    table.insert(self.Elements, {
        Type = "Section",
        Text = params[1],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 30},
        Color = {r = 50, g = 50, b = 60, a = 255}
    })
    self:UpdateScroll()
end

function XenoHub.Tab:AddInput(params)
    table.insert(self.Elements, {
        Type = "Input",
        Text = params[1],
        Callback = params[2],
        Position = {x = 0, y = self:CalculateNextElementPosition()},
        Size = {width = self.Size.width, height = 30},
        Value = "",
        ButtonSize = 20
    })
    self:UpdateScroll()
end

function XenoHub.Tab:CalculateNextElementPosition()
    if #self.Elements == 0 then return 0 end
    local lastElement = self.Elements[#self.Elements]
    return lastElement.Position.y + lastElement.Size.height + 5
end

function XenoHub.Tab:UpdateScroll()
    local totalHeight = 0
    for _, element in ipairs(self.Elements) do
        totalHeight = totalHeight + element.Size.height + 5
    end
    self.MaxScroll = math.max(0, totalHeight - self.Size.height)
end

-- Notification System
function XenoHub:ShowNotification(params)
    local notification = {
        Message = params.Message or "Welcome to the Xeno Hub",
        Duration = params.Duration or 3,
        Position = {x = self.Window.Size.width / 2 - 150, y = 100},
        Size = {width = 300, height = 60},
        BackgroundColor = {r = 0, g = 100, b = 255, a = 220},
        TextColor = {r = 255, g = 255, b = 255, a = 255},
        Timer = 0,
        Visible = true,
        Buttons = {
            {
                Text = "✖️",
                Position = {x = 50, y = 35},
                Size = {width = 30, height = 20},
                Color = {r = 255, g = 50, b = 50, a = 200},
                OnClick = function() notification.Visible = false end
            },
            {
                Text = "✔️",
                Position = {x = 220, y = 35},
                Size = {width = 30, height = 20},
                Color = {r = 50, g = 255, b = 50, a = 200},
                OnClick = function() notification.Visible = false end
            }
        }
    }
    
    table.insert(self.Notifications, notification)
    
    -- Auto-hide after duration
    Citizen.SetTimeout(notification.Duration * 1000, function()
        notification.Visible = false
    end)
end

-- Draggable Elements Management
function XenoHub:MakeDraggable(element)
    element.Draggable = true
    table.insert(self.DraggableElements, element)
end

-- Update Function (to be called in game loop)
function XenoHub:Update()
    if not self.Window.Visible then return end
    
    -- Draw window background
    DrawRect(
        self.Window.Position.x, self.Window.Position.y,
        self.Window.Size.width, self.Window.Size.height,
        self.Window.Color.r, self.Window.Color.g, self.Window.Color.b, self.Window.Color.a
    )
    
    -- Draw window title
    DrawText(
        self.Window.Title,
        self.Window.Position.x + 20, self.Window.Position.y + 15,
        18, 255, 255, 255, 255
    )
    
    -- Draw tabs
    local tabWidth = (self.Window.Size.width - 20) / math.max(1, #self.Tabs)
    for i, tab in ipairs(self.Tabs) do
        local tabX = self.Window.Position.x + 10 + (i-1) * tabWidth
        local tabColor = tab.Active and {r=50,g=150,b=255,a=255} or {r=70,g=70,b=80,a=255}
        
        -- Draw tab background
        DrawRect(
            tabX, self.Window.Position.y + 50,
            tabWidth, 30,
            tabColor.r, tabColor.g, tabColor.b, tabColor.a
        )
        
        -- Draw tab text
        DrawText(
            tab.Name,
            tabX + tabWidth/2 - MeasureTextWidth(tab.Name, 14)/2, 
            self.Window.Position.y + 55,
            14, 255, 255, 255, 255
        )
        
        -- Draw active tab indicator (blue vertical line)
        if tab.Active then
            DrawRect(
                tabX, self.Window.Position.y + 50,
                3, 30,
                0, 150, 255, 255
            )
        end
    end
    
    -- Draw active tab content
    local activeTab = nil
    for _, tab in ipairs(self.Tabs) do
        if tab.Active then activeTab = tab break end
    end
    
    if activeTab then
        -- Create scissor rect for tab content
        SetScissorRect(
            self.Window.Position.x + 10, self.Window.Position.y + 80,
            self.Window.Size.width - 20, self.Window.Size.height - 90,
            true
        )
        
        -- Draw tab elements with scroll offset
        for _, element in ipairs(activeTab.Elements) do
            local elementY = self.Window.Position.y + 80 + element.Position.y - activeTab.ScrollOffset
            
            -- Only draw if visible in scroll area
            if elementY + element.Size.height > self.Window.Position.y + 80 and 
               elementY < self.Window.Position.y + self.Window.Size.height - 10 then
                self:DrawElement(element, self.Window.Position.x + 10 + element.Position.x, elementY)
            end
        end
        
        -- Disable scissor rect
        SetScissorRect(0, 0, 0, 0, false)
        
        -- Draw scroll bar if needed
        if activeTab.MaxScroll > 0 then
            local scrollBarHeight = math.max(20, (activeTab.Size.height / (activeTab.MaxScroll + activeTab.Size.height)) * activeTab.Size.height)
            local scrollBarPos = (activeTab.ScrollOffset / activeTab.MaxScroll) * (activeTab.Size.height - scrollBarHeight)
            
            DrawRect(
                self.Window.Position.x + self.Window.Size.width - 15, 
                self.Window.Position.y + 80 + scrollBarPos,
                5, scrollBarHeight,
                100, 100, 100, 200
            )
        end
    end
    
    -- Draw close button
    if self.Window.CloseButton then
        DrawRect(
            self.Window.Position.x + self.Window.Size.width - 30, self.Window.Position.y + 10,
            20, 20,
            255, 50, 50, 200
        )
        DrawText(
            "X",
            self.Window.Position.x + self.Window.Size.width - 30 + 10 - MeasureTextWidth("X", 16)/2,
            self.Window.Position.y + 10 + 10 - 8,
            16, 255, 255, 255, 255
        )
    end
    
    -- Draw image preview if visible
    if self.ImagePreview.Visible and self.ImagePreview.Image then
        DrawSprite(
            self.ImagePreview.Image,
            self.ImagePreview.Position.x, self.ImagePreview.Position.y,
            self.ImagePreview.Size.width, self.ImagePreview.Size.height,
            0, 255, 255, 255, 255
        )
    end
    
    -- Draw notifications
    for i = #self.Notifications, 1, -1 do
        local notification = self.Notifications[i]
        if notification.Visible then
            -- Draw notification background
            DrawRect(
                notification.Position.x, notification.Position.y,
                notification.Size.width, notification.Size.height,
                notification.BackgroundColor.r, notification.BackgroundColor.g, 
                notification.BackgroundColor.b, notification.BackgroundColor.a
            )
            
            -- Draw notification text
            DrawText(
                notification.Message,
                notification.Position.x + notification.Size.width/2 - MeasureTextWidth(notification.Message, 14)/2,
                notification.Position.y + 15,
                14, notification.TextColor.r, notification.TextColor.g, 
                notification.TextColor.b, notification.TextColor.a
            )
            
            -- Draw buttons
            for _, button in ipairs(notification.Buttons) do
                DrawRect(
                    notification.Position.x + button.Position.x,
                    notification.Position.y + button.Position.y,
                    button.Size.width, button.Size.height,
                    button.Color.r, button.Color.g, button.Color.b, button.Color.a
                )
                
                DrawText(
                    button.Text,
                    notification.Position.x + button.Position.x + button.Size.width/2 - MeasureTextWidth(button.Text, 12)/2,
                    notification.Position.y + button.Position.y + button.Size.height/2 - 6,
                    12, 255, 255, 255, 255
                )
            end
        else
            table.remove(self.Notifications, i)
        end
    end
end

-- Element Drawing Functions
function XenoHub:DrawElement(element, x, y)
    if element.Type == "Button" then
        -- Button background
        DrawRect(
            x, y,
            element.Size.width, element.Size.height,
            60, 60, 70, 220
        )
        
        -- Button text
        DrawText(
            element.Text,
            x + element.Size.width/2 - MeasureTextWidth(element.Text, 14)/2,
            y + element.Size.height/2 - 7,
            14, 255, 255, 255, 255
        )
        
    elseif element.Type == "Toggle" then
        -- Toggle text
        DrawText(
            element.Text,
            x + 25, y + element.Size.height/2 - 6,
            14, 255, 255, 255, 255
        )
        
        -- Toggle box
        local boxColor = element.State and {r=50,g=255,b=50,a=255} or {r=255,g=50,b=50,a=255}
        DrawRect(
            x + 5, y + element.Size.height/2 - element.BoxSize/2,
            element.BoxSize, element.BoxSize,
            boxColor.r, boxColor.g, boxColor.b, boxColor.a
        )
        
    elseif element.Type == "Checkbox" then
        -- Checkbox text
        DrawText(
            element.Text,
            x + 25, y + element.Size.height/2 - 6,
            14, 255, 255, 255, 255
        )
        
        -- Checkbox box
        local boxColor = element.State and {r=50,g=255,b=50,a=255} or {r=255,g=50,b=50,a=255}
        DrawRect(
            x + 5, y + element.Size.height/2 - element.BoxSize/2,
            element.BoxSize, element.BoxSize,
            boxColor.r, boxColor.g, boxColor.b, boxColor.a
        )
        
        -- Checkbox symbol
        DrawText(
            element.State and "✔️" or "✖️",
            x + 5 + element.BoxSize/2 - MeasureTextWidth(element.State and "✔️" or "✖️", 12)/2,
            y + element.Size.height/2 - 6,
            12, 255, 255, 255, 255
        )
        
    elseif element.Type == "Label" then
        -- Label text
        DrawText(
            element.Text,
            x, y,
            14, 255, 255, 255, 255
        )
        
        -- If label contains code, draw with different style
        if element.Code then
            DrawRect(
                x, y + 15,
                element.Size.width, 1,
                100, 100, 100, 150
            )
        end
        
    elseif element.Type == "Dropdown" then
        -- Dropdown background
        DrawRect(
            x, y,
            element.Size.width, element.Size.height,
            60, 60, 70, 220
        )
        
        -- Dropdown text
        DrawText(
            element.Text,
            x + 10, y + element.Size.height/2 - 7,
            14, 255, 255, 255, 255
        )
        
        -- Dropdown arrow
        DrawText(
            element.ArrowState,
            x + element.Size.width - 20, y + element.Size.height/2 - 7,
            14, 255, 255, 255, 255
        )
        
        -- Expanded options
        if element.Expanded then
            local optionsHeight = math.min(#element.Options, element.MaxVisibleOptions) * element.OptionHeight
            
            -- Options background
            DrawRect(
                x, y + element.Size.height,
                element.Size.width, optionsHeight,
                40, 40, 50, 240
            )
            
            -- Draw visible options
            local startIndex = math.max(1, element.SelectedIndex - math.floor(element.MaxVisibleOptions/2))
            local endIndex = math.min(#element.Options, startIndex + element.MaxVisibleOptions - 1)
            
            for i = startIndex, endIndex do
                local optionY = y + element.Size.height + (i - startIndex) * element.OptionHeight
                
                -- Highlight selected option
                if i == element.SelectedIndex then
                    DrawRect(
                        x, optionY,
                        element.Size.width, element.OptionHeight,
                        80, 80, 90, 220
                    )
                    
                    -- Selection indicator (red vertical line)
                    DrawRect(
                        x, optionY,
                        3, element.OptionHeight,
                        255, 50, 50, 255
                    )
                end
                
                -- Option text
                DrawText(
                    element.Options[i],
                    x + 10, optionY + element.OptionHeight/2 - 6,
                    12, 255, 255, 255, 255
                )
            end
            
            -- Scroll indicators if more options available
            if startIndex > 1 then
                DrawText(
                    "↑",
                    x + element.Size.width - 15, y + element.Size.height + 5,
                    12, 200, 200, 200, 255
                )
            end
            
            if endIndex < #element.Options then
                DrawText(
                    "↓",
                    x + element.Size.width - 15, y + element.Size.height + optionsHeight - 15,
                    12, 200, 200, 200, 255
                )
            end
        end
        
    elseif element.Type == "Section" then
        -- Section background
        DrawRect(
            x, y,
            element.Size.width, element.Size.height,
            element.Color.r, element.Color.g, element.Color.b, element.Color.a
        )
        
        -- Section text
        DrawText(
            element.Text,
            x + 10, y + element.Size.height/2 - 7,
            14, 255, 255, 255, 255
        )
        
    elseif element.Type == "Input" then
        -- Input background
        DrawRect(
            x, y,
            element.Size.width - element.ButtonSize - 5, element.Size.height,
            40, 40, 50, 220
        )
        
        -- Input text
        DrawText(
            element.Value == "" and element.Text or element.Value,
            x + 10, y + element.Size.height/2 - 7,
            14, 255, 255, 255, 255
        )
        
        -- Input button
        DrawRect(
            x + element.Size.width - element.ButtonSize - 5, y,
            element.ButtonSize, element.Size.height,
            60, 60, 70, 220
        )
        
        DrawText(
            "✏️",
            x + element.Size.width - element.ButtonSize - 5 + element.ButtonSize/2 - MeasureTextWidth("✏️", 12)/2,
            y + element.Size.height/2 - 6,
            12, 255, 255, 255, 255
        )
    end
end

-- Input Handling
function XenoHub:HandleInput()
    if not self.Window.Visible then return end
    
    -- Get mouse position
    local mouseX, mouseY = GetMousePosition()
    
    -- Check if mouse is dragging any element
    for _, element in ipairs(self.DraggableElements) do
        if element.Draggable and IsMouseDown(0) then
            if IsMouseOver(element.Position.x, element.Position.y, element.Size.width, element.Size.height) then
                element.Position.x = mouseX - element.Size.width/2
                element.Position.y = mouseY - element.Size.height/2
                break
            end
        end
    end
    
    -- Check window close button
    if self.Window.CloseButton and IsMouseClicked(0) then
        if IsMouseOver(
            self.Window.Position.x + self.Window.Size.width - 30, 
            self.Window.Position.y + 10,
            20, 20
        ) then
            self.Window.Visible = false
            self.ImagePreview.Visible = false
            return
        end
    end
    
    -- Check tab switching
    if IsMouseClicked(0) then
        local tabWidth = (self.Window.Size.width - 20) / math.max(1, #self.Tabs)
        for i, tab in ipairs(self.Tabs) do
            local tabX = self.Window.Position.x + 10 + (i-1) * tabWidth
            if IsMouseOver(tabX, self.Window.Position.y + 50, tabWidth, 30) then
                self:SetActiveTab(tab.Name)
                break
            end
        end
    end
    
    -- Handle active tab elements
    local activeTab = nil
    for _, tab in ipairs(self.Tabs) do
        if tab.Active then activeTab = tab break end
    end
    
    if activeTab then
        -- Handle mouse wheel for scrolling
        local wheelDelta = GetMouseWheelDelta()
        if wheelDelta ~= 0 then
            activeTab.ScrollOffset = math.max(0, math.min(activeTab.MaxScroll, activeTab.ScrollOffset - wheelDelta * 20))
        end
        
        -- Handle element clicks
        if IsMouseClicked(0) then
            for _, element in ipairs(activeTab.Elements) do
                local elementY = self.Window.Position.y + 80 + element.Position.y - activeTab.ScrollOffset
                
                if IsMouseOver(
                    self.Window.Position.x + 10 + element.Position.x,
                    elementY,
                    element.Size.width, element.Size.height
                ) then
                    self:HandleElementClick(element)
                    break
                end
            end
        end
    end
    
    -- Handle notifications
    for i = #self.Notifications, 1, -1 do
        local notification = self.Notifications[i]
        if notification.Visible and IsMouseClicked(0) then
            for _, button in ipairs(notification.Buttons) do
                if IsMouseOver(
                    notification.Position.x + button.Position.x,
                    notification.Position.y + button.Position.y,
                    button.Size.width, button.Size.height
                ) then
                    button.OnClick()
                    break
                end
            end
        end
    end
end

function XenoHub:HandleElementClick(element)
    if element.Type == "Button" then
        -- Play button animation
        element.Animation = "Pressed"
        Citizen.SetTimeout(200, function()
            element.Animation = "Release"
            Citizen.SetTimeout(200, function()
                element.Animation = nil
            end)
        end)
        
        -- Execute callback
        if element.Callback then element.Callback() end
        
    elseif element.Type == "Toggle" then
        -- Toggle state
        element.State = not element.State
        
        -- Execute callback
        if element.Callback then element.Callback(element.State) end
        
    elseif element.Type == "Checkbox" then
        -- Toggle state
        element.State = not element.State
        
        -- Execute callback
        if element.Callback then element.Callback(element.State) end
        
    elseif element.Type == "Dropdown" then
        if element.Expanded then
            -- Check if an option was clicked
            local startIndex = math.max(1, element.SelectedIndex - math.floor(element.MaxVisibleOptions/2))
            local endIndex = math.min(#element.Options, startIndex + element.MaxVisibleOptions - 1)
            
            for i = startIndex, endIndex do
                local optionY = self.Window.Position.y + 80 + element.Position.y - activeTab.ScrollOffset + 
                                element.Size.height + (i - startIndex) * element.OptionHeight
                
                if IsMouseOver(
                    self.Window.Position.x + 10 + element.Position.x,
                    optionY,
                    element.Size.width, element.OptionHeight
                ) then
                    element.SelectedIndex = i
                    if element.Callback then element.Callback(element.Options[i]) end
                    break
                end
            end
        end
        
        -- Toggle expanded state
        element.Expanded = not element.Expanded
        element.ArrowState = element.Expanded and "⬆️" or "⬇️"
        
    elseif element.Type == "Input" then
        -- Check if input button was clicked
        if IsMouseOver(
            self.Window.Position.x + 10 + element.Position.x + element.Size.width - element.ButtonSize - 5,
            self.Window.Position.y + 80 + element.Position.y - activeTab.ScrollOffset,
            element.ButtonSize, element.Size.height
        ) then
            -- Show input dialog
            local result = ShowInputDialog(element.Text, element.Value)
            if result then
                element.Value = result
                if element.Callback then element.Callback(result) end
            end
        end
    end
end

-- Helper Functions
function IsMouseOver(x, y, width, height)
    local mouseX, mouseY = GetMousePosition()
    return mouseX >= x and mouseX <= x + width and mouseY >= y and mouseY <= y + height
end

function MeasureTextWidth(text, fontsize)
    -- This would be implemented with the game's text measurement API
    return #text * (fontsize * 0.6)
end

function DrawText(text, x, y, fontsize, r, g, b, a)
    -- This would use the game's text rendering API
    -- Example: SetTextFont, SetTextScale, SetTextColor, SetTextEntry, AddTextComponentString, DrawText
end

function DrawRect(x, y, width, height, r, g, b, a)
    -- This would use the game's rectangle rendering API
end

function DrawSprite(texture, x, y, width, height, rotation, r, g, b, a)
    -- This would use the game's sprite rendering API
end

function GetMousePosition()
    -- This would use the game's input API to get mouse position
    return 0, 0 -- Placeholder
end

function IsMouseDown(button)
    -- This would use the game's input API to check mouse button state
    return false -- Placeholder
end

function IsMouseClicked(button)
    -- This would use the game's input API to check mouse button click
    return false -- Placeholder
end

function GetMouseWheelDelta()
    -- This would use the game's input API to get mouse wheel delta
    return 0 -- Placeholder
end

function SetScissorRect(x, y, width, height, enable)
    -- This would use the game's scissor rect API to clip rendering
end

function ShowInputDialog(title, default)
    -- This would use the game's native input dialog
    return default -- Placeholder
end

-- Example Usage
function SetupExampleUI()
    XenoHub:CreateWindow()
    
    -- Create tabs
    local mainTab = XenoHub:AddTab("Main")
    local settingsTab = XenoHub:AddTab("Settings")
    local aboutTab = XenoHub:AddTab("About")
    
    -- Add elements to Main tab
    mainTab:AddButton({
        "Test Button", 
        function() 
            XenoHub:ShowNotification({
                Message = "Button clicked!", 
                Duration = 2
            }) 
        end
    })
    
    mainTab:AddToggle({
        "Enable Feature", 
        function(state) 
            print("Feature enabled:", state) 
        end
    })
    
    mainTab:AddCheckbox({
        "Advanced Options", 
        function(state) 
            print("Advanced options:", state) 
        end
    })
    
    mainTab:AddLabel({
        "Welcome to Xeno Hub", 
        "-- This is a code comment"
    })
    
    mainTab:AddDropdown({
        "Select Option", 
        {"Option 1", "Option 2", "Option 3", "Option 4", "Option 5"}, 
        function(selected) 
            print("Selected:", selected) 
        end
    })
    
    mainTab:AddSection("Settings Section")
    
    mainTab:AddInput({
        "Enter text", 
        function(text) 
            print("Input text:", text) 
        end
    })
    
    -- Add elements to Settings tab
    settingsTab:AddToggle({
        "Dark Theme", 
        function(state) 
            print("Dark theme:", state) 
        end
    })
    
    settingsTab:AddDropdown({
        "Resolution", 
        {"1920x1080", "1600x900", "1366x768"}, 
        function(selected) 
            print("Resolution set to:", selected) 
        end
    })
    
    -- Add elements to About tab
    aboutTab:AddLabel({"Xeno Hub v1.0"})
    aboutTab:AddLabel({"Created by xeno999"})
    aboutTab:AddLabel({"Special thanks to the community"})
    
    -- Make image preview draggable
    XenoHub:MakeDraggable(XenoHub.ImagePreview)
    
    -- Show welcome notification
    XenoHub:ShowNotification({
        Message = "Welcome to the Xeno Hub", 
        Duration = 5
    })
end

-- Main loop
Citizen.CreateThread(function()
    SetupExampleUI()
    
    while true do
        XenoHub:Update()
        XenoHub:HandleInput()
        Citizen.Wait(0)
    end
end)
